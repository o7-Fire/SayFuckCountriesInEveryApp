'''
# List languages
LS=( $(find * -maxdepth 1 -mindepth 1 -type d -printf "%f\n") )

declare -A ALS
for L in ${LS[@]}
do 
    ALS[${L^}]=""
done

mapfile -d '' LS < <(printf '%s\0' "${!ALS[@]}" | sort -z)

echo "${#LS[@]} LANGUAGE(S) FOUND"
echo ${LS[@]^^}

# Building Table
echo "CONSTRUCTING TABLE"
TABLE="| Media |" 

for L in ${LS[@]}
do
    TABLE+=" $L |"
done
TABLE+="\n"

TABLE+="| --- |" 
for L in ${LS[@]}
do
    TABLE+=" :-: |"
done
TABLE+="\n"

# Check languages per media
PS=( $(find * -maxdepth 0 -type d) )
for P in ${PS[@]}
do
    TABLE+="| ${P^} |"
    PLS=$(cd $P && find * -maxdepth 1)
    PLS=${PLS[@]}
    shopt -s nocasematch
    for L in ${LS[@]}
    do
        if [[ $PLS =~ .*($L/impossible\.txt).* ]] 
        then
            TABLE+=" [ - ]($P\/${BASH_REMATCH[1]/\//\\/}) "
        elif [[ " $PLS " == *" $L "* ]] 
        then
            TABLE+=" ✓ "
        else 
            TABLE+=" X "
        fi
        TABLE+="|"
    done
    shopt -u nocasematch
    TABLE+="\n"
done
TABLE=$(printf '%b\n' "$TABLE")

# Updating Table
OLD=$(cat README.md)
perl -0777 -i -pe \
    "s/(<GENERATED>).*(<\/GENERATED>)/\$1\n\n$TABLE\n\n\$2/s" \
    README.md
NEW=$(cat README.md)
if [[ $NEW == $OLD ]] 
then
    echo "TABLE UP TO DATE"
    exit 0
else
    echo "TABLE UDPATED"
fi

# Runtime commit
if [[ $USER != "runner" ]]
then
    echo "NOT RUNNER, SKIPPING COMMIT"
    exit 0
fi

# Push changes to git(hub)
echo "COMMITING"
git config --global user.email volas@mindustry.me #stolen
git config --global user.name Not Volas
git add README.md
git commit -m "Update README.md"
git push

exit
'''

import os
from pathlib import Path
from typing import List

readmeFile = Path("README.md")
orig = readmeFile.read_text()
ctx = str(orig)
finishedC = "✓"
noneC = "X"
# unsupportedC = ":question:"
impossibleC = "-"


def getMediaList() -> List[str]:
    actual = []
    for folder in os.listdir(Path.cwd()):
        # if not start with . and is a directory
        if not folder.startswith('.') and os.path.isdir(folder):
            actual.append(folder)
    actual.sort()
    return actual


def getLanguageList(folder) -> List[str]:
    langs = []
    for file in os.listdir(folder):
        if os.path.isdir(folder + '/' + file):
            langs.append(file)
    return langs


def getMatrix(folders: List[str]) -> dict:
    matrix = {
        'Media': folders,
    }
    language = set()
    # discover all languages
    for folder in folders:
        langs = getLanguageList(folder)
        language.update(langs)

    language = list(language)
    language.sort()
    for lang in language:
        matrix[lang] = []
        for folder in folders:
            if lang in getLanguageList(folder):
                # if lang folder contain IMPOSSIBLE.txt
                impossibleTxt = folder + '/' + lang + '/IMPOSSIBLE.txt'
                if os.path.exists(impossibleTxt):#enable hyperlink
                    matrix[lang].append("[ " + impossibleC + " ]("+impossibleTxt+")")
                else:
                    matrix[lang].append(finishedC)
            else:
                matrix[lang].append(noneC)
    return matrix


def buildTable(matrix: dict) -> str:
    colsWidth = {}
    for col in matrix:
        length = 0
        for row in matrix[col]:
            length = max(length, len(row))
        # length = length + 2  # add 2 for the border at start and end
        colsWidth[col] = length
    # print head
    tableMatrix = "|"
    for col, width in colsWidth.items():
        tableMatrix += " " + col + " " * (width - len(col)) + " |"
    tableMatrix += "\n"
    # print border
    tableMatrix += "|"
    for col, width in colsWidth.items():
        width = width + 2
        tableMatrix += "-" * width + "|"
    tableMatrix += "\n"
    # print body
    rows = 0
    for i in range(len(matrix['Media'])):
        tableMatrix += "|"
        for col, width in colsWidth.items():
            tableMatrix += " " + matrix[col][i] + " " * (width - len(matrix[col][i])) + " |"
        tableMatrix += "\n"
        rows += 1

    return tableMatrix


mat = getMatrix(getMediaList())
table = buildTable(mat)
ctx = ctx.split("<GENERATED>\n")  # this is retarded
ctx[1] = table + "\n" + "</GENERATED>"
ctx = "<GENERATED>\n\n".join(ctx)
if ctx != orig:
    readmeFile.write_text(ctx, 'utf-8')
    print('TABLE GENERATED')
else:
    print("TABLE UP TO DATE")
    exit(0)
try:
    if os.getlogin() != "runner":
        print("Not runner, skipping git commit")
        exit(0)
except:
    pass

os.system("git config --global user.email volas@mindustry.me")
os.system("git config --global user.name Volas Updater")
os.system('git add README.md')
os.system('git commit -m "Volas Bot"')
os.system('git push')
print("Great Success!")
